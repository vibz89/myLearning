$ docker pull mysql  ----> download new image or services
$ docker image inspect <image-id> ----> get the details of the image
$ docker image ls   ----> list all the images
$ docker container ls -a    --->   list all the container (-a will show inactive container)
$ docker container logs <container-ID>   ---> fetch logs from specific container
$ docker container run -p 3306:3306 -d --name aug_mysql -e MYSQL_ROOT_PASSWORD=admin mysql   ---> run a new container with specifying port (-p) and dettached (-d) and with name (--name) and setting env (-e) with password (MYSQL_ROOT_PASSWORD=admin)
$ docker container run -p 3306:3306 -d --name aug_mysql -e MYSQL_RANDOM_ROOT_PASSWORD=yes mysql  ---> start and run a new container (setting environment varaiable using -e and random password(MYSQL_RANDOM_ROOT_PASSWORD=yes) for mysql)
$ docker container stop <cont-id/name>  ---> stop a container
$ docker container start <cont-id/name>  ---> start a stop container
$ docker container rm <cont-id/name>  ----> remove container

$ docker login  -----> to login to docker hub

$ docker tag nginx vibzdocker/mynginx  ---> to tag to our dockerhub <dockerid/contyainername>
$ docker tag nginx vibzdocker/mynginx:1.1  ---> tagging the version. will add with new tag in same repository
$ docker push vibzdocker/mynginx  ----> to push the container to our docker hub <dockerid/contyainername>

$ docker network ls ----> list all networks
$ docker network create <networkname>   ----> create custom network
$ docker container run -p 3000:80 --name nginx1 -d --network myapp nginx  ---->  creating a new service with assigning custom network


$ docker container exec -it 6a42f9e11ce3 bash  ----> to get into container <container name/id> <command(bash command)>
	apt-get update
	apt-get install htop
	htop   ----> display process
	apt-get install iputils-ping

$ docker container run -p 3001:80 nginx1 -d --network myapp nginx  ---> created a nginx server to test ping with same network myapp
$ docker container run -p 3001:80 nginx2 -d --network myapp nginx  ---> created a nginx server to test ping with same network myapp

ping nginx1.myapp / ping nginx2.myapp  ---> willl work without knowing ipaddress

$ docker inspect 675d4faa5189  ---> inspect the image id and display an html with details

$ docker network connect <myapp2> <nginx1>   ----> connect one container with different network
$ docker container exec -it nginx1 bash
	ping nginx3.myapp2  ---> will work in nginx1 as we have attached myapp2 to nginx1 container

$ docker network disconnect myapp2 nginx1  -----> disconnect network from container

#####to test load balancing####

$ docker pull elasticsearch:2   -----> download elastic search

$ docker network create socgen   -----> create new network name socgen

$ docker container run --net socgen --name es1 --network-alias search -d elasticsearch:2  ---> create a container of elasticsearch:2 with netwrk alias name search
$ docker container run --net socgen --name es2 --network-alias search -d elasticsearch:2 

$ docker pull alpine  -- --> download alpine to execute nslookup
$ docker container run --net socgen alpine nslookup search  ---> to see the ipaddress linked with alias 'search' with command nslookup

OUTPUT
nslookup: can't resolve '(null)': Name does not resolve

Name:      search
Address 1: 172.20.0.2 es1.socgen
Address 2: 172.20.0.3 es2.socgen

$ docker pull centos  -----> download centos to execute curl
$ docker container run --net socgen centos curl -s search:9200   -----> create a container with network socgen with centos to execute curl and search for elastic search (port:9200) to get the details where 'search' is the alias name

OUTPUT
es1
{
  "name" : "Iridia",
  "cluster_name" : "elasticsearch",
  "cluster_uuid" : "KJJ21ADCTeGsjEPiPGa_9w",
  "version" : {
    "number" : "2.4.6",
    "build_hash" : "5376dca9f70f3abef96a77f4bb22720ace8240fd",
    "build_timestamp" : "2017-07-18T12:17:44Z",
    "build_snapshot" : false,
    "lucene_version" : "5.5.4"
  },swarm 
  "tagline" : "You Know, for Search"
}
es2
{
  "name" : "Martinex",
  "cluster_name" : "elasticsearch",
  "cluster_uuid" : "rK91vN7vTNqXlZU5ovBN0A",
  "version" : {
    "number" : "2.4.6",
    "build_hash" : "5376dca9f70f3abef96a77f4bb22720ace8240fd",
    "build_timestamp" : "2017-07-18T12:17:44Z",
    "build_snapshot" : false,
    "lucene_version" : "5.5.4"
  },
  "tagline" : "You Know, for Search"
}swarm 



$ docker container prune -----> to remove  all stopped containers

##########Creating Volume#####

$ docker container run --name nginxtest -p 5000:80 -d -v /c/dock:/usr/share/nginx/html nginx  -----> -v will help to create volume, then specfy the local path and the app path. If index.html is placed in local then it will be opened when it is loaded

$ docker volume ls   -----> list all volume

$ docker volume create <database>  ----> create new volume named database

OUTPUT
DRIVER              VOLUME NAME
local               632a5132cc300f1f811f4b13966e10797ef086b4c909e6d46e8f96e3456b1724
local               8cadb4777d943142aabcd5b70bcb6a5a78e36102d10d4f600bb1ec0745b343e9
local               8e9627af5aeec7512fb844dc7f91c3d4400f572f52a64262ad0785c3e2e08df3
local               a61d4ffa0f101ecb2a08c1fda3b384e6db01c41290c718168177c8028ce56c4d
local               b6a7a41b1c7e45046bfeabfc7d6b3adf8059b301ad12100898da4a8a0f153e85
local               database

$ docker container run -d -p 5001:80 -v nginxvol:/usr/share/nginx/html --name ngtvol nginx  ----> create a container with specified volume

$ docker container exec -it ngtvol bash  ---> getting inside nginx container

	cd usr/share/nginx/html/
	ls
	apt-get update
	apt-get install nano
	nano index.html  ---> change the file to see the update in screen.

once done remove the container and add new container with same volume
$ docker container run -d -p 5000:80 -v nginxvol:/usr/share/nginx/html --name ngtvol nginx ----> execute the same modified file

#######POSTGRES TASK########

$ docker pull postgres:9.6.1   -----> base 
$ docker pull postgres:9.6.2   -----> to update
$ docker volume create psql-data  -----> create volume
$ docker container run --name pstgres -e POSTGRES_PASSWORD=mysecretpassword -d -v psql-data:/var/lib/postgresql/data postgres:9.6.1  ------> we need to set env -e variable to access postgres

$ docker container exec -it pstgres bash

To run postgres plsql -----> /usr/lib/postgresql/9.6/bin

$ docker container stop aa14b2c4f200
$ docker container rm aa14b2c4f200
--updated
$ docker container run --name pstgres -e POSTGRES_PASSWORD=mysecretpassword -d -v psql-data:/var/lib/postgresql/data postgres:9.6.2
$ docker container logs aa14b2c4f200 ---> check if work



########Creating Docker Image##########

create 'Dockerfile' and add details to execute. Sample dockerfile to run in ubuntu with nginx is shown below. Each line is each layer of docker image.
For eg:-
	FROM ubuntu

	RUN apt-get update	------> to fetch the cached data
	RUN apt-get install nginx -y	------> to install nginx to execut silently (-y)
	RUN apt-get install htop	------> to install htop


	VOLUME ["/usr/share/nginx/html"]	-----> mention the volume

	EXPOSE 80			------> expose the port

	CMD ["nginx","-g","daemon off;"]   ----> to keep the container alive


after creating the Dockerfile then build the image using this
$ docker build -t="vibzdocker/nginxalpha" .
$ docker build -t vibzdocker/nginxalpha .	------> to create image using the Dockerfile existing within the cmd location

$ docker container run -d --name nginxubuntu -p 5001:80 vibzdocker/nginxalpha

$ docker image history vibzdocker/nginxalpha  ----> show all the history of the image. it will show layered wise history of image generation.

OUTPUT
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
25f5b58ce456        6 minutes ago       /bin/sh -c #(nop)  CMD ["nginx" "-g" "daemon…   0B
c8ba9ae0b253        6 minutes ago       /bin/sh -c #(nop)  EXPOSE 80                    0B
ad7aa3ffb5da        6 minutes ago       /bin/sh -c #(nop)  VOLUME [/usr/share/nginx/…   0B
4398c0aeeffe        6 minutes ago       /bin/sh -c apt-get install htop                 1.22MB
305b4bc4024c        6 minutes ago       /bin/sh -c apt-get install nginx -y             60.2MB
495d51dd3551        7 minutes ago       /bin/sh -c apt-get update                       26.9MB
3556258649b2        2 weeks ago         /bin/sh -c #(nop)  CMD ["/bin/bash"]            0B
<missing>           2 weeks ago         /bin/sh -c mkdir -p /run/systemd && echo 'do…   7B
<missing>           2 weeks ago         /bin/sh -c set -xe   && echo '#!/bin/sh' > /…   745B
<missing>           2 weeks ago         /bin/sh -c [ -z "$(apt-get indextargets)" ]     987kB
<missing>           2 weeks ago         /bin/sh -c #(nop) ADD file:3ddd02d976792b6c6…   63.2MB

As we have different layer of installation in the Dockerfile, we can make it as a single layer instead of executing/creating seperate layer
Eg:-

	RUN apt-get update && \
		apt-get install nginx -y && \
		apt-get install htop

optimised Dockerfile
	
	FROM ubuntu

	RUN apt-get update && \
	 	apt-get install nginx -y && \
	 	apt-get install htop


	VOLUME ["/usr/share/nginx/html"]

	EXPOSE 80

	CMD ["nginx","-g","daemon off;"]

Then when you get the history it would have optimised the layer as shown below

$ docker image history vibzdocker/nginxminalpha

IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
9e94afaf8bc7        3 minutes ago       /bin/sh -c #(nop)  CMD ["nginx" "-g" "daemon…   0B
3727d75bdef4        3 minutes ago       /bin/sh -c #(nop)  EXPOSE 80                    0B
ade78f4413fc        3 minutes ago       /bin/sh -c #(nop)  VOLUME [/usr/share/nginx/…   0B
69e532252860        3 minutes ago       /bin/sh -c apt-get update &&   apt-get insta…   87.3MB
3556258649b2        2 weeks ago         /bin/sh -c #(nop)  CMD ["/bin/bash"]            0B
<missing>           2 weeks ago         /bin/sh -c mkdir -p /run/systemd && echo 'do…   7B
<missing>           2 weeks ago         /bin/sh -c set -xe   && echo '#!/bin/sh' > /…   745B
<missing>           2 weeks ago         /bin/sh -c [ -z "$(apt-get indextargets)" ]     987kB
<missing>           2 weeks ago         /bin/sh -c #(nop) ADD file:3ddd02d976792b6c6…   63.2MB


$ docker build -t vibzdocker/nginxbeta1 .
$ docker container run -d --name nginxubuntu -p 5000:80 vibzdocker/nginxbeta1


#######################Creating Doc file with php and nginx ################

FROM ubuntu

RUN apt-get update \
	&& apt-get install nginx -y \
	&& apt-get install htop \
	&& apt-get install wget -y \
	&& apt-get install -y php7.0
	
	

# creating a folder 
RUN	mkdir /var/downloads && \
    wget -O /var/downloads/ https://github.com/dockerfile/nginx/archive/master.zip


#Copying customised default to update port for nginx
COPY default /etc/nginx/sites-enabled/default

#specify the working directory 
WORKDIR /var/www/html

#copy the file
COPY src /var/www/html/

#create the volume
VOLUME ["/var/www/html"]

#expose the port
EXPOSE 81

#specify the command which will keep it alive
CMD ["nginx","-g","daemon off;"]


******

$ docker build -t vibzdocker/nginxphpalpha .
$ docker container run --name ngphub -d -p 81:81 vibzdocker/nginxphpalpha
$ docker container exec -it 246f3bb014e0 bash



##########################DOCKER COMPOSE##############################


$ docker-compose --version    ------> provide version of docker-compose

OUTPUT
docker-compose version 1.20.1, build 5d8c71b2

Create docker-compose.yml file which defines the image files and used for starting a container

SAMPLE 

version : "3"
services:
    frontend:
        image: nginx
        ports:
           - "8080:80"
    database:
        image: postgres
        environment:
            POSTGRES_PASSWORD: example



$ docker-compose up -d   -----> will execute the docker-compose.yml . it will start the container
$ docker-compose down   ------> will shut down the container and remove

it will create network, container, volume and will remove these when stopped automatically

yml definition --

- nginxvol1:/usr/share/nginx/html:ro  -----> :ro -- readonly mode for volume creation

depends_on:
           - database   ----> when added 'depends on' it will wait till the depended services are up. here 'database' service have to start.




**************************************************************


$ docker search tomcat  -----> to search for image

###########################DOCKER SWARM################################

$ docker swarm init    ------> will creat a manager with details for joining for workers
$ docker swarm init --advertise-addr <ip_address_of_my_system>    -----> to swarn with ip address
$ docker swarm join --token SWMTKN-1-3jig90kzbkxfhdxs14nw9g7dv1e9bvdc2m7dwvtsngzsol41b2-b7mmtgnn1lwfk1gvh6kuqjncf 10.0.2.15:2377   ------>  to add worker to the manager

$ docker swarm join-token manager   -------> will allow to add a new manager into manager group
$ docker swarm leave --force ------> to exit from swarm

Manager Only
$ docker service create -p 5000:80 nginx ------> create a service which can be access by workers
$ docker service ls   -------> list out all services (similar to container)
$ docker service ps <service_id>   -------> display the service and get the node and container details
$ docker service rm <service_id>   -------> remove the service

Creating replica by manager
$ docker service create --replicas 3 -p 5000:80 nginx    ------> to create 3 replica of nginx
$ docker node ls     -------> display who all connected to the service 

$ docker service <service id> --replicas 5    -----> update the particular service with 5 more replicas

$ docker network create mynetswarm --driver overlay    ------> creating overlay network for swarm

--------practise--------
$ docker service create --name mydrupal --net mynetswarm -d -p 5000:80 drupal 
$ docker service create --name mypostgres --net mynetswarm -d -e POSTGRES_PASSWORD=mysecretpassword postgres ---> name of this service will be used as database name in postgres
$ docker service update --replicas 2 <yreg01tol6vh>    ----> update specfic service id with replicas


$ docker secret ls    ------> display secrets
$ echo "secrete" | docker secret create psqlpass -     ------>  creating passkey as key value pair

$ docker secret inspect <ft2xu4alixt3x43dm30u14nxi>	--------> to display the secret file with the secret id

$ docker stack deploy -c docker-compose.yml drupal	---------> to run a docker-compose in swarm using stack

Eg:-
version: '3.1'

services:
  drupal:
    image: drupal
    ports:
     - "5000:80"
    volumes:
     - drupal-modules:/var/www/html/modules
     - drupal-profiles:/var/www/html/profiles
     - drupal-themes:/var/www/html/themes
     - drupal-sites:/var/www/html/sites
  postgres:
    image: postgres
    environment:
     - POSTGRES_PASSWORD_FILE=/run/secrets/sqlpass
    secrets:
     - sqlpass
    volumes:
     - drupal-data:/var/lib/postgressql/data
volumes:
  drupal-modules:
  drupal-profiles:
  drupal-themes:
  drupal-sites:
  drupal-data:
secrets:
  sqlpass:
    external: true
 
This is sample compose file with secret key for drupal


#####http://notepad.pw/patrickpai
####https://github.com/patrickpaip/dockers/blob/master/probstatement.pdf
